%% Initialization
clc;          % 清空命令窗口
clear;        % 清除工作区变量
close all;    % 关闭所有图形窗口

%% File Pathway
folder_path = pwd;

% Load the image
image_files = dir(fullfile(folder_path, ".jpg"));
img_path = fullfile(folder_path, image_files(1).name); % 获取第一个图像文件的路径
img = imread(img_path); % 正确读取图像

%% Select Region of interest (ROI)
figure;
imshow(img);
title('选取感兴趣的区域 (ROI) - 单击并拖拽鼠标');

% 创建一个交互式的矩形选取工具
h = imrect(gca, [1 1 100 100]); % 初始化位置和大小（可以根据需要调整）

% 等待用户确认选取的 ROI
setPosition(h, wait(h)); % 此函数会阻塞，直到用户双击确认选取的 ROI

% 获取选取的 ROI 的位置和大小
roi_position = getPosition(h);

% 裁剪原始图像到选取的 ROI
roi_img = imcrop(img, roi_position);

% 关闭原始图像的显示
close(gcf);

%% RGB detection
% Ensure the image is in color (RGB)
if size(roi_img, 3) ~= 3
    error('The image must be an RGB image.');
end

% Extract the RGB channels, which corresponds to the lipids and protein
redChannel = roi_img(:, :, 1);
greenChannel = roi_img(:, :, 2);

% Determine the size of the image
[rows, cols, ~] = size(roi_img);

%% Manual Selection of Lipid Center of Mass
% Display the cropped ROI image for manual selection
figure;
imshow(roi_img);
title('Click on the Lipid Center of Mass');

% Wait for mouse click
[center_of_mass_x, center_of_mass_y] = ginput(1);

% Ensure the selected point is within the image boundaries
if center_of_mass_x < 1 || center_of_mass_x > cols ||...
   center_of_mass_y < 1 || center_of_mass_y > rows
    error('Selected point is outside the image boundaries.');
end

% Store the selected point as the center of mass
center_of_mass = [center_of_mass_x, center_of_mass_y];

% 关闭原始图像的显示
close(gcf);

%% Display the selected center of mass on the original image
figure;
imshow(roi_img);
hold on;
% Center of mass is plotted with a red plus sign
plot(center_of_mass(1), center_of_mass(2), 'r+', 'MarkerSize', 15);
hold off;
% Create an empty array to store the fluorescence intensity values
angles = 0:1:359;
red_intensities = zeros(size(angles));
green_intensities = zeros(size(angles));

% Analyze the fluorescence intensities at each angle
for i = 1:length(angles)
    % Define the angle in radians
    angle_rad = deg2rad(angles(i));
    
    % Create a line (ray) from the center of mass at the specified angle
    % Define the length of the ray (use the image diagonal for simplicity)
    ray_length = hypot(rows, cols);
    
    % Sample points along the ray - create a vector of x and y coordinates
    x_coords = center_of_mass(1) + (0:ray_length) .* cos(angle_rad);
    y_coords = center_of_mass(2) + (0:ray_length) .* sin(angle_rad);
    
    % Ensure the coordinates are within the image boundaries
    valid_indices = x_coords > 0 & x_coords <= cols & y_coords > 0 & y_coords <= rows;
    x_coords = x_coords(valid_indices);
    y_coords = y_coords(valid_indices);
    
    % Sample the fluorescence intensities along the ray
    red_samples = interp2(double(redChannel), x_coords, y_coords, 'nearest', 0);
    green_samples = interp2(double(greenChannel), x_coords, y_coords, 'nearest', 0);
    
    % Take the maximum intensity as the value for this angle
    red_intensities(i) = max(red_samples);
    green_intensities(i) = max(green_samples);
end

% Perform FFT on the green_intensities vector
green_fft = fft(green_intensities);
red_fft = fft(red_intensities);

% Determine a cutoff frequency (you may need to adjust this)
cutoff_green = floor(length(green_fft)/5); % Example: Keep only the first 1/5 of frequencies
cutoff_red = floor(length(red_fft)/5); % Example: Keep only the first 1/5 of frequencies

% Zero out the high frequency components to smooth the signal
green_fft(cutoff_green:end-cutoff_green+2) = 0;
red_fft(cutoff_red:end-cutoff_red+2) = 0;

% Perform the inverse FFT to get the smoothed signal
green_smoothed = real(ifft(green_fft));
red_smoothed = real(ifft(red_fft));

% Normalize the smoothed signal
green_intensities = (green_smoothed) / ...
                            (max(green_smoothed) - min(green_smoothed));
red_intensities = (red_smoothed - min(red_smoothed)) / ...
                            (max(red_smoothed) - min(red_smoothed));

% Normalize the fluorescence intensities based on their min and max values
red_intensities_normalized = (red_intensities - min(red_intensities)) / ...
                             (max(red_intensities) - min(red_intensities));
green_intensities_normalized = (green_intensities) / ...
                               (max(green_intensities)-min(green_intensities))/max(green_intensities);

% Plot the normalized fluorescence intensities against the angles in degrees
figure; % Open a new figure window
plot(angles, red_intensities_normalized, 'r',LineWidth=1);
hold on; % Keep the plot for the next data series
plot(angles, green_intensities_normalized, 'g',LineWidth=1);
box off;
xlabel('Angle (°)');
ylabel('Normalized Radial Fluorescence');
xticks(0:90:360); % Setting x-axis ticks at an interval of 90°
xlim([0, 360]);
yticks(0:0.2:1); % Setting y-axis ticks at an interval of 0.25
ylim([0, 1]);
ax = gca; % Get current axes handle
ax.LineWidth = 1.5; % Set the axes border linewidth
hold off;

% Save the figure in TIFF format with the .tif extension
saveas(gcf, 'Radial_Fluorescence.tif');
